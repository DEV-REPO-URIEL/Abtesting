//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/firestore/v1/firestore.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf

/// The Cloud Firestore service.
///
/// This service exposes several types of comparable timestamps:
///
/// *    `create_time` - The time at which a document was created. Changes only
///      when a document is deleted, then re-created. Increases in a strict
///       monotonic fashion.
/// *    `update_time` - The time at which a document was last updated. Changes
///      every time a document is modified. Does not change when a write results
///      in no modifications. Increases in a strict monotonic fashion.
/// *    `read_time` - The time at which a particular state was observed. Used
///      to denote a consistent snapshot of the database or the time at which a
///      Document was observed to not exist.
/// *    `commit_time` - The time at which the writes in a transaction were
///      committed. Any read with an equal or greater `read_time` is guaranteed
///      to see the effects of the transaction.
///
/// Usage: instantiate `Google_Firestore_V1_FirestoreClient`, then call methods of this protocol to make API calls.
public protocol Google_Firestore_V1_FirestoreClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Google_Firestore_V1_FirestoreClientInterceptorFactoryProtocol? { get }

  func getDocument(_ request: Google_Firestore_V1_GetDocumentRequest,
                   callOptions: CallOptions?) -> UnaryCall<
    Google_Firestore_V1_GetDocumentRequest,
    Google_Firestore_V1_Document
  >

  func listDocuments(_ request: Google_Firestore_V1_ListDocumentsRequest,
                     callOptions: CallOptions?)
    -> UnaryCall<Google_Firestore_V1_ListDocumentsRequest,
      Google_Firestore_V1_ListDocumentsResponse>

  func createDocument(_ request: Google_Firestore_V1_CreateDocumentRequest,
                      callOptions: CallOptions?) -> UnaryCall<
    Google_Firestore_V1_CreateDocumentRequest,
    Google_Firestore_V1_Document
  >

  func updateDocument(_ request: Google_Firestore_V1_UpdateDocumentRequest,
                      callOptions: CallOptions?) -> UnaryCall<
    Google_Firestore_V1_UpdateDocumentRequest,
    Google_Firestore_V1_Document
  >

  func deleteDocument(_ request: Google_Firestore_V1_DeleteDocumentRequest,
                      callOptions: CallOptions?) -> UnaryCall<
    Google_Firestore_V1_DeleteDocumentRequest,
    SwiftProtobuf.Google_Protobuf_Empty
  >

  func batchGetDocuments(_ request: Google_Firestore_V1_BatchGetDocumentsRequest,
                         callOptions: CallOptions?,
                         handler: @escaping (Google_Firestore_V1_BatchGetDocumentsResponse)
                           -> Void)
    -> ServerStreamingCall<Google_Firestore_V1_BatchGetDocumentsRequest,
      Google_Firestore_V1_BatchGetDocumentsResponse>

  func beginTransaction(_ request: Google_Firestore_V1_BeginTransactionRequest,
                        callOptions: CallOptions?)
    -> UnaryCall<Google_Firestore_V1_BeginTransactionRequest,
      Google_Firestore_V1_BeginTransactionResponse>

  func commit(_ request: Google_Firestore_V1_CommitRequest,
              callOptions: CallOptions?) -> UnaryCall<
    Google_Firestore_V1_CommitRequest,
    Google_Firestore_V1_CommitResponse
  >

  func rollback(_ request: Google_Firestore_V1_RollbackRequest,
                callOptions: CallOptions?) -> UnaryCall<
    Google_Firestore_V1_RollbackRequest,
    SwiftProtobuf.Google_Protobuf_Empty
  >

  func runQuery(_ request: Google_Firestore_V1_RunQueryRequest,
                callOptions: CallOptions?,
                handler: @escaping (Google_Firestore_V1_RunQueryResponse) -> Void)
    -> ServerStreamingCall<Google_Firestore_V1_RunQueryRequest,
      Google_Firestore_V1_RunQueryResponse>

  func write(callOptions: CallOptions?,
             handler: @escaping (Google_Firestore_V1_WriteResponse) -> Void)
    -> BidirectionalStreamingCall<Google_Firestore_V1_WriteRequest,
      Google_Firestore_V1_WriteResponse>

  func listen(callOptions: CallOptions?,
              handler: @escaping (Google_Firestore_V1_ListenResponse) -> Void)
    -> BidirectionalStreamingCall<Google_Firestore_V1_ListenRequest,
      Google_Firestore_V1_ListenResponse>

  func listCollectionIds(_ request: Google_Firestore_V1_ListCollectionIdsRequest,
                         callOptions: CallOptions?)
    -> UnaryCall<Google_Firestore_V1_ListCollectionIdsRequest,
      Google_Firestore_V1_ListCollectionIdsResponse>
}

extension Google_Firestore_V1_FirestoreClientProtocol {
  public var serviceName: String {
    return "google.firestore.v1.Firestore"
  }

  /// Gets a single document.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetDocument.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getDocument(_ request: Google_Firestore_V1_GetDocumentRequest,
                          callOptions: CallOptions? = nil) -> UnaryCall<
    Google_Firestore_V1_GetDocumentRequest,
    Google_Firestore_V1_Document
  > {
    return makeUnaryCall(
      path: "/google.firestore.v1.Firestore/GetDocument",
      request: request,
      callOptions: callOptions ?? defaultCallOptions,
      interceptors: interceptors?.makeGetDocumentInterceptors() ?? []
    )
  }

  /// Lists documents.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListDocuments.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listDocuments(_ request: Google_Firestore_V1_ListDocumentsRequest,
                            callOptions: CallOptions? = nil)
    -> UnaryCall<Google_Firestore_V1_ListDocumentsRequest,
      Google_Firestore_V1_ListDocumentsResponse> {
    return makeUnaryCall(
      path: "/google.firestore.v1.Firestore/ListDocuments",
      request: request,
      callOptions: callOptions ?? defaultCallOptions,
      interceptors: interceptors?.makeListDocumentsInterceptors() ?? []
    )
  }

  /// Creates a new document.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateDocument.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createDocument(_ request: Google_Firestore_V1_CreateDocumentRequest,
                             callOptions: CallOptions? = nil) -> UnaryCall<
    Google_Firestore_V1_CreateDocumentRequest,
    Google_Firestore_V1_Document
  > {
    return makeUnaryCall(
      path: "/google.firestore.v1.Firestore/CreateDocument",
      request: request,
      callOptions: callOptions ?? defaultCallOptions,
      interceptors: interceptors?.makeCreateDocumentInterceptors() ?? []
    )
  }

  /// Updates or inserts a document.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateDocument.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func updateDocument(_ request: Google_Firestore_V1_UpdateDocumentRequest,
                             callOptions: CallOptions? = nil) -> UnaryCall<
    Google_Firestore_V1_UpdateDocumentRequest,
    Google_Firestore_V1_Document
  > {
    return makeUnaryCall(
      path: "/google.firestore.v1.Firestore/UpdateDocument",
      request: request,
      callOptions: callOptions ?? defaultCallOptions,
      interceptors: interceptors?.makeUpdateDocumentInterceptors() ?? []
    )
  }

  /// Deletes a document.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteDocument.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteDocument(_ request: Google_Firestore_V1_DeleteDocumentRequest,
                             callOptions: CallOptions? = nil) -> UnaryCall<
    Google_Firestore_V1_DeleteDocumentRequest,
    SwiftProtobuf.Google_Protobuf_Empty
  > {
    return makeUnaryCall(
      path: "/google.firestore.v1.Firestore/DeleteDocument",
      request: request,
      callOptions: callOptions ?? defaultCallOptions,
      interceptors: interceptors?.makeDeleteDocumentInterceptors() ?? []
    )
  }

  /// Gets multiple documents.
  ///
  /// Documents returned by this method are not guaranteed to be returned in the
  /// same order that they were requested.
  ///
  /// - Parameters:
  ///   - request: Request to send to BatchGetDocuments.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func batchGetDocuments(_ request: Google_Firestore_V1_BatchGetDocumentsRequest,
                                callOptions: CallOptions? = nil,
                                handler: @escaping (Google_Firestore_V1_BatchGetDocumentsResponse)
                                  -> Void)
    -> ServerStreamingCall<Google_Firestore_V1_BatchGetDocumentsRequest,
      Google_Firestore_V1_BatchGetDocumentsResponse> {
    return makeServerStreamingCall(
      path: "/google.firestore.v1.Firestore/BatchGetDocuments",
      request: request,
      callOptions: callOptions ?? defaultCallOptions,
      interceptors: interceptors?.makeBatchGetDocumentsInterceptors() ?? [],
      handler: handler
    )
  }

  /// Starts a new transaction.
  ///
  /// - Parameters:
  ///   - request: Request to send to BeginTransaction.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func beginTransaction(_ request: Google_Firestore_V1_BeginTransactionRequest,
                               callOptions: CallOptions? = nil)
    -> UnaryCall<Google_Firestore_V1_BeginTransactionRequest,
      Google_Firestore_V1_BeginTransactionResponse> {
    return makeUnaryCall(
      path: "/google.firestore.v1.Firestore/BeginTransaction",
      request: request,
      callOptions: callOptions ?? defaultCallOptions,
      interceptors: interceptors?.makeBeginTransactionInterceptors() ?? []
    )
  }

  /// Commits a transaction, while optionally updating documents.
  ///
  /// - Parameters:
  ///   - request: Request to send to Commit.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func commit(_ request: Google_Firestore_V1_CommitRequest,
                     callOptions: CallOptions? = nil) -> UnaryCall<
    Google_Firestore_V1_CommitRequest,
    Google_Firestore_V1_CommitResponse
  > {
    return makeUnaryCall(
      path: "/google.firestore.v1.Firestore/Commit",
      request: request,
      callOptions: callOptions ?? defaultCallOptions,
      interceptors: interceptors?.makeCommitInterceptors() ?? []
    )
  }

  /// Rolls back a transaction.
  ///
  /// - Parameters:
  ///   - request: Request to send to Rollback.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func rollback(_ request: Google_Firestore_V1_RollbackRequest,
                       callOptions: CallOptions? = nil) -> UnaryCall<
    Google_Firestore_V1_RollbackRequest,
    SwiftProtobuf.Google_Protobuf_Empty
  > {
    return makeUnaryCall(
      path: "/google.firestore.v1.Firestore/Rollback",
      request: request,
      callOptions: callOptions ?? defaultCallOptions,
      interceptors: interceptors?.makeRollbackInterceptors() ?? []
    )
  }

  /// Runs a query.
  ///
  /// - Parameters:
  ///   - request: Request to send to RunQuery.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func runQuery(_ request: Google_Firestore_V1_RunQueryRequest,
                       callOptions: CallOptions? = nil,
                       handler: @escaping (Google_Firestore_V1_RunQueryResponse) -> Void)
    -> ServerStreamingCall<Google_Firestore_V1_RunQueryRequest,
      Google_Firestore_V1_RunQueryResponse> {
    return makeServerStreamingCall(
      path: "/google.firestore.v1.Firestore/RunQuery",
      request: request,
      callOptions: callOptions ?? defaultCallOptions,
      interceptors: interceptors?.makeRunQueryInterceptors() ?? [],
      handler: handler
    )
  }

  /// Streams batches of document updates and deletes, in order.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func write(callOptions: CallOptions? = nil,
                    handler: @escaping (Google_Firestore_V1_WriteResponse) -> Void)
    -> BidirectionalStreamingCall<Google_Firestore_V1_WriteRequest,
      Google_Firestore_V1_WriteResponse> {
    return makeBidirectionalStreamingCall(
      path: "/google.firestore.v1.Firestore/Write",
      callOptions: callOptions ?? defaultCallOptions,
      interceptors: interceptors?.makeWriteInterceptors() ?? [],
      handler: handler
    )
  }

  /// Listens to changes.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func listen(callOptions: CallOptions? = nil,
                     handler: @escaping (Google_Firestore_V1_ListenResponse) -> Void)
    -> BidirectionalStreamingCall<Google_Firestore_V1_ListenRequest,
      Google_Firestore_V1_ListenResponse> {
    return makeBidirectionalStreamingCall(
      path: "/google.firestore.v1.Firestore/Listen",
      callOptions: callOptions ?? defaultCallOptions,
      interceptors: interceptors?.makeListenInterceptors() ?? [],
      handler: handler
    )
  }

  /// Lists all the collection IDs underneath a document.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListCollectionIds.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listCollectionIds(_ request: Google_Firestore_V1_ListCollectionIdsRequest,
                                callOptions: CallOptions? = nil)
    -> UnaryCall<Google_Firestore_V1_ListCollectionIdsRequest,
      Google_Firestore_V1_ListCollectionIdsResponse> {
    return makeUnaryCall(
      path: "/google.firestore.v1.Firestore/ListCollectionIds",
      request: request,
      callOptions: callOptions ?? defaultCallOptions,
      interceptors: interceptors?.makeListCollectionIdsInterceptors() ?? []
    )
  }
}

public protocol Google_Firestore_V1_FirestoreClientInterceptorFactoryProtocol {
  /// - Returns: Interceptors to use when invoking 'getDocument'.
  func makeGetDocumentInterceptors()
    -> [ClientInterceptor<Google_Firestore_V1_GetDocumentRequest, Google_Firestore_V1_Document>]

  /// - Returns: Interceptors to use when invoking 'listDocuments'.
  func makeListDocumentsInterceptors() -> [ClientInterceptor<
    Google_Firestore_V1_ListDocumentsRequest,
    Google_Firestore_V1_ListDocumentsResponse
  >]

  /// - Returns: Interceptors to use when invoking 'createDocument'.
  func makeCreateDocumentInterceptors()
    -> [ClientInterceptor<Google_Firestore_V1_CreateDocumentRequest, Google_Firestore_V1_Document>]

  /// - Returns: Interceptors to use when invoking 'updateDocument'.
  func makeUpdateDocumentInterceptors()
    -> [ClientInterceptor<Google_Firestore_V1_UpdateDocumentRequest, Google_Firestore_V1_Document>]

  /// - Returns: Interceptors to use when invoking 'deleteDocument'.
  func makeDeleteDocumentInterceptors()
    -> [ClientInterceptor<Google_Firestore_V1_DeleteDocumentRequest,
      SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'batchGetDocuments'.
  func makeBatchGetDocumentsInterceptors() -> [ClientInterceptor<
    Google_Firestore_V1_BatchGetDocumentsRequest,
    Google_Firestore_V1_BatchGetDocumentsResponse
  >]

  /// - Returns: Interceptors to use when invoking 'beginTransaction'.
  func makeBeginTransactionInterceptors() -> [ClientInterceptor<
    Google_Firestore_V1_BeginTransactionRequest,
    Google_Firestore_V1_BeginTransactionResponse
  >]

  /// - Returns: Interceptors to use when invoking 'commit'.
  func makeCommitInterceptors()
    -> [ClientInterceptor<Google_Firestore_V1_CommitRequest, Google_Firestore_V1_CommitResponse>]

  /// - Returns: Interceptors to use when invoking 'rollback'.
  func makeRollbackInterceptors()
    -> [ClientInterceptor<Google_Firestore_V1_RollbackRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'runQuery'.
  func makeRunQueryInterceptors()
    -> [ClientInterceptor<Google_Firestore_V1_RunQueryRequest,
      Google_Firestore_V1_RunQueryResponse>]

  /// - Returns: Interceptors to use when invoking 'write'.
  func makeWriteInterceptors()
    -> [ClientInterceptor<Google_Firestore_V1_WriteRequest, Google_Firestore_V1_WriteResponse>]

  /// - Returns: Interceptors to use when invoking 'listen'.
  func makeListenInterceptors()
    -> [ClientInterceptor<Google_Firestore_V1_ListenRequest, Google_Firestore_V1_ListenResponse>]

  /// - Returns: Interceptors to use when invoking 'listCollectionIds'.
  func makeListCollectionIdsInterceptors() -> [ClientInterceptor<
    Google_Firestore_V1_ListCollectionIdsRequest,
    Google_Firestore_V1_ListCollectionIdsResponse
  >]
}

public final class Google_Firestore_V1_FirestoreClient: Google_Firestore_V1_FirestoreClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Google_Firestore_V1_FirestoreClientInterceptorFactoryProtocol?

  /// Creates a client for the google.firestore.v1.Firestore service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(channel: GRPCChannel,
              defaultCallOptions: CallOptions = CallOptions(),
              interceptors: Google_Firestore_V1_FirestoreClientInterceptorFactoryProtocol? = nil) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}
