// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: firestore/local/mutation.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Each user gets a single queue of WriteBatches to apply to the server.
/// MutationQueue tracks the metadata about the queue.
public struct Firestore_Client_MutationQueue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// An identifier for the highest numbered batch that has been acknowledged by
  /// the server. All WriteBatches in this queue with batch_ids less than or
  /// equal to this value are considered to have been acknowledged by the
  /// server.
  public var lastAcknowledgedBatchID: Int32 = 0

  /// A stream token that was previously sent by the server.
  ///
  /// See StreamingWriteRequest in datastore.proto for more details about usage.
  ///
  /// After sending this token, earlier tokens may not be used anymore so only a
  /// single stream token is retained.
  public var lastStreamToken: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Message containing a batch of user-level writes intended to be sent to
/// the server in a single call. Each user-level batch gets a separate
/// WriteBatch with a new batch_id.
public struct Firestore_Client_WriteBatch {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// An identifier for this batch, allocated by the mutation queue in a
  /// monotonically increasing manner.
  public var batchID: Int32 = 0

  /// A list of writes to apply. All writes will be applied atomically.
  public var writes: [Google_Firestore_V1_Write] = []

  /// The local time at which the write batch was initiated.
  public var localWriteTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _localWriteTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_localWriteTime = newValue}
  }
  /// Returns true if `localWriteTime` has been explicitly set.
  public var hasLocalWriteTime: Bool {return self._localWriteTime != nil}
  /// Clears the value of `localWriteTime`. Subsequent reads from it will return its default value.
  public mutating func clearLocalWriteTime() {self._localWriteTime = nil}

  /// A list of pseudo-writes that represent a partial base state from when this
  /// write batch was initially created. When computing the local view batch,
  /// these base_writes are applied prior to the real writes in order to
  /// override certain document fields from the remote document cache. This is
  /// necessary in the case of non-idempotent writes (e.g. numericAdd
  /// transforms) to make sure that the local view of the modified documents
  /// doesn't flicker if the remote document cache receives the result of the
  /// non-idempotent write before the write is removed from the queue.
  ///
  /// These writes are never sent to the backend.
  public var baseWrites: [Google_Firestore_V1_Write] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _localWriteTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "firestore.client"

extension Firestore_Client_MutationQueue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MutationQueue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "last_acknowledged_batch_id"),
    2: .standard(proto: "last_stream_token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.lastAcknowledgedBatchID) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.lastStreamToken) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.lastAcknowledgedBatchID != 0 {
      try visitor.visitSingularInt32Field(value: self.lastAcknowledgedBatchID, fieldNumber: 1)
    }
    if !self.lastStreamToken.isEmpty {
      try visitor.visitSingularBytesField(value: self.lastStreamToken, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Firestore_Client_MutationQueue, rhs: Firestore_Client_MutationQueue) -> Bool {
    if lhs.lastAcknowledgedBatchID != rhs.lastAcknowledgedBatchID {return false}
    if lhs.lastStreamToken != rhs.lastStreamToken {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Firestore_Client_WriteBatch: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WriteBatch"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "batch_id"),
    2: .same(proto: "writes"),
    3: .standard(proto: "local_write_time"),
    4: .standard(proto: "base_writes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.batchID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.writes) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._localWriteTime) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.baseWrites) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.batchID != 0 {
      try visitor.visitSingularInt32Field(value: self.batchID, fieldNumber: 1)
    }
    if !self.writes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.writes, fieldNumber: 2)
    }
    try { if let v = self._localWriteTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.baseWrites.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.baseWrites, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Firestore_Client_WriteBatch, rhs: Firestore_Client_WriteBatch) -> Bool {
    if lhs.batchID != rhs.batchID {return false}
    if lhs.writes != rhs.writes {return false}
    if lhs._localWriteTime != rhs._localWriteTime {return false}
    if lhs.baseWrites != rhs.baseWrites {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
