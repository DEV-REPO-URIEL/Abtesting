// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: firestore/local/target.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A Target is a long-lived data structure representing a resumable listen on a
/// particular user query. While the query describes what to listen to, the
/// Target records data about when the results were last updated and enough
/// information to be able to resume listening later.
public struct Firestore_Client_Target {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// An auto-generated sequential numeric identifier for the target. This
  /// serves as the identity of the target, and once assigned never changes.
  public var targetID: Int32 {
    get {return _storage._targetID}
    set {_uniqueStorage()._targetID = newValue}
  }

  /// The last snapshot version received from the Watch Service for this target.
  ///
  /// This is the same value as TargetChange.read_time
  /// https://github.com/googleapis/googleapis/blob/master/google/firestore/v1/firestore.proto#L734
  public var snapshotVersion: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._snapshotVersion ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._snapshotVersion = newValue}
  }
  /// Returns true if `snapshotVersion` has been explicitly set.
  public var hasSnapshotVersion: Bool {return _storage._snapshotVersion != nil}
  /// Clears the value of `snapshotVersion`. Subsequent reads from it will return its default value.
  public mutating func clearSnapshotVersion() {_uniqueStorage()._snapshotVersion = nil}

  /// An opaque, server-assigned token that allows watching a query to be
  /// resumed after disconnecting without retransmitting all the data that
  /// matches the query. The resume token essentially identifies a point in
  /// time from which the server should resume sending results.
  ///
  /// This is related to the snapshot_version in that the resume_token
  /// effectively also encodes that value, but the resume_token is opaque and
  /// sometimes encodes additional information.
  ///
  /// A consequence of this is that the resume_token should be used when asking
  /// the server to reason about where this client is in the watch stream, but
  /// the client should use the snapshot_version for its own purposes.
  ///
  /// This is the same value as TargetChange.resume_token
  /// https://github.com/googleapis/googleapis/blob/master/google/firestore/v1/firestore.proto#L722
  public var resumeToken: Data {
    get {return _storage._resumeToken}
    set {_uniqueStorage()._resumeToken = newValue}
  }

  /// A sequence number representing the last time this query was listened to,
  /// used for garbage collection purposes.
  ///
  /// Conventionally this would be a timestamp value, but device-local clocks
  /// are unreliable and they must be able to create new listens even while
  /// disconnected. Instead this should be a monotonically increasing number
  /// that's incremented on each listen call.
  ///
  /// This is different from the target_id since the target_id is an immutable
  /// identifier assigned to the Target on first use while
  /// last_listen_sequence_number is updated every time the query is listened
  /// to.
  public var lastListenSequenceNumber: Int64 {
    get {return _storage._lastListenSequenceNumber}
    set {_uniqueStorage()._lastListenSequenceNumber = newValue}
  }

  /// The server-side type of target to listen to.
  public var targetType: OneOf_TargetType? {
    get {return _storage._targetType}
    set {_uniqueStorage()._targetType = newValue}
  }

  /// A target specified by a query.
  public var query: Google_Firestore_V1_Target.QueryTarget {
    get {
      if case .query(let v)? = _storage._targetType {return v}
      return Google_Firestore_V1_Target.QueryTarget()
    }
    set {_uniqueStorage()._targetType = .query(newValue)}
  }

  /// A target specified by a set of document names.
  public var documents: Google_Firestore_V1_Target.DocumentsTarget {
    get {
      if case .documents(let v)? = _storage._targetType {return v}
      return Google_Firestore_V1_Target.DocumentsTarget()
    }
    set {_uniqueStorage()._targetType = .documents(newValue)}
  }

  /// Denotes the maximum snapshot version at which the associated query view
  /// contained no limbo documents.
  public var lastLimboFreeSnapshotVersion: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._lastLimboFreeSnapshotVersion ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._lastLimboFreeSnapshotVersion = newValue}
  }
  /// Returns true if `lastLimboFreeSnapshotVersion` has been explicitly set.
  public var hasLastLimboFreeSnapshotVersion: Bool {return _storage._lastLimboFreeSnapshotVersion != nil}
  /// Clears the value of `lastLimboFreeSnapshotVersion`. Subsequent reads from it will return its default value.
  public mutating func clearLastLimboFreeSnapshotVersion() {_uniqueStorage()._lastLimboFreeSnapshotVersion = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The server-side type of target to listen to.
  public enum OneOf_TargetType: Equatable {
    /// A target specified by a query.
    case query(Google_Firestore_V1_Target.QueryTarget)
    /// A target specified by a set of document names.
    case documents(Google_Firestore_V1_Target.DocumentsTarget)

  #if !swift(>=4.1)
    public static func ==(lhs: Firestore_Client_Target.OneOf_TargetType, rhs: Firestore_Client_Target.OneOf_TargetType) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.query, .query): return {
        guard case .query(let l) = lhs, case .query(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.documents, .documents): return {
        guard case .documents(let l) = lhs, case .documents(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Global state tracked across all Targets, tracked separately to avoid the
/// need for extra indexes.
public struct Firestore_Client_TargetGlobal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The highest numbered target id across all Targets.
  ///
  /// See Target.target_id.
  public var highestTargetID: Int32 = 0

  /// The highest numbered last_listen_sequence_number across all Targets.
  ///
  /// See Target.last_listen_sequence_number.
  public var highestListenSequenceNumber: Int64 = 0

  /// A global snapshot version representing the last consistent snapshot we
  /// received from the backend. This is monotonically increasing and any
  /// snapshots received from the backend prior to this version (e.g. for
  /// targets resumed with a resume_token) should be suppressed (buffered) until
  /// the backend has caught up to this snapshot_version again. This prevents
  /// our cache from ever going backwards in time.
  ///
  /// This is updated whenever our we get a TargetChange with a read_time and
  /// empty target_ids.
  public var lastRemoteSnapshotVersion: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _lastRemoteSnapshotVersion ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_lastRemoteSnapshotVersion = newValue}
  }
  /// Returns true if `lastRemoteSnapshotVersion` has been explicitly set.
  public var hasLastRemoteSnapshotVersion: Bool {return self._lastRemoteSnapshotVersion != nil}
  /// Clears the value of `lastRemoteSnapshotVersion`. Subsequent reads from it will return its default value.
  public mutating func clearLastRemoteSnapshotVersion() {self._lastRemoteSnapshotVersion = nil}

  /// On platforms that need it, holds the number of targets persisted.
  public var targetCount: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _lastRemoteSnapshotVersion: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "firestore.client"

extension Firestore_Client_Target: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Target"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "target_id"),
    2: .standard(proto: "snapshot_version"),
    3: .standard(proto: "resume_token"),
    4: .standard(proto: "last_listen_sequence_number"),
    5: .same(proto: "query"),
    6: .same(proto: "documents"),
    7: .standard(proto: "last_limbo_free_snapshot_version"),
  ]

  fileprivate class _StorageClass {
    var _targetID: Int32 = 0
    var _snapshotVersion: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _resumeToken: Data = Data()
    var _lastListenSequenceNumber: Int64 = 0
    var _targetType: Firestore_Client_Target.OneOf_TargetType?
    var _lastLimboFreeSnapshotVersion: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _targetID = source._targetID
      _snapshotVersion = source._snapshotVersion
      _resumeToken = source._resumeToken
      _lastListenSequenceNumber = source._lastListenSequenceNumber
      _targetType = source._targetType
      _lastLimboFreeSnapshotVersion = source._lastLimboFreeSnapshotVersion
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularInt32Field(value: &_storage._targetID) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._snapshotVersion) }()
        case 3: try { try decoder.decodeSingularBytesField(value: &_storage._resumeToken) }()
        case 4: try { try decoder.decodeSingularInt64Field(value: &_storage._lastListenSequenceNumber) }()
        case 5: try {
          var v: Google_Firestore_V1_Target.QueryTarget?
          var hadOneofValue = false
          if let current = _storage._targetType {
            hadOneofValue = true
            if case .query(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._targetType = .query(v)
          }
        }()
        case 6: try {
          var v: Google_Firestore_V1_Target.DocumentsTarget?
          var hadOneofValue = false
          if let current = _storage._targetType {
            hadOneofValue = true
            if case .documents(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {
            if hadOneofValue {try decoder.handleConflictingOneOf()}
            _storage._targetType = .documents(v)
          }
        }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._lastLimboFreeSnapshotVersion) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._targetID != 0 {
        try visitor.visitSingularInt32Field(value: _storage._targetID, fieldNumber: 1)
      }
      try { if let v = _storage._snapshotVersion {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if !_storage._resumeToken.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._resumeToken, fieldNumber: 3)
      }
      if _storage._lastListenSequenceNumber != 0 {
        try visitor.visitSingularInt64Field(value: _storage._lastListenSequenceNumber, fieldNumber: 4)
      }
      switch _storage._targetType {
      case .query?: try {
        guard case .query(let v)? = _storage._targetType else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }()
      case .documents?: try {
        guard case .documents(let v)? = _storage._targetType else { preconditionFailure() }
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }()
      case nil: break
      }
      try { if let v = _storage._lastLimboFreeSnapshotVersion {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Firestore_Client_Target, rhs: Firestore_Client_Target) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._targetID != rhs_storage._targetID {return false}
        if _storage._snapshotVersion != rhs_storage._snapshotVersion {return false}
        if _storage._resumeToken != rhs_storage._resumeToken {return false}
        if _storage._lastListenSequenceNumber != rhs_storage._lastListenSequenceNumber {return false}
        if _storage._targetType != rhs_storage._targetType {return false}
        if _storage._lastLimboFreeSnapshotVersion != rhs_storage._lastLimboFreeSnapshotVersion {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Firestore_Client_TargetGlobal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TargetGlobal"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "highest_target_id"),
    2: .standard(proto: "highest_listen_sequence_number"),
    3: .standard(proto: "last_remote_snapshot_version"),
    4: .standard(proto: "target_count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.highestTargetID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.highestListenSequenceNumber) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._lastRemoteSnapshotVersion) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.targetCount) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.highestTargetID != 0 {
      try visitor.visitSingularInt32Field(value: self.highestTargetID, fieldNumber: 1)
    }
    if self.highestListenSequenceNumber != 0 {
      try visitor.visitSingularInt64Field(value: self.highestListenSequenceNumber, fieldNumber: 2)
    }
    try { if let v = self._lastRemoteSnapshotVersion {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.targetCount != 0 {
      try visitor.visitSingularInt32Field(value: self.targetCount, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Firestore_Client_TargetGlobal, rhs: Firestore_Client_TargetGlobal) -> Bool {
    if lhs.highestTargetID != rhs.highestTargetID {return false}
    if lhs.highestListenSequenceNumber != rhs.highestListenSequenceNumber {return false}
    if lhs._lastRemoteSnapshotVersion != rhs._lastRemoteSnapshotVersion {return false}
    if lhs.targetCount != rhs.targetCount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
