// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: firestore/local/maybe_document.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2018 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A message indicating that the document is known to not exist.
public struct Firestore_Client_NoDocument {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The name of the document that does not exist, in the standard format:
  /// `projects/{project_id}/databases/{database_id}/documents/{document_path}`
  public var name: String = String()

  /// The time at which we observed that it does not exist.
  public var readTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _readTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_readTime = newValue}
  }
  /// Returns true if `readTime` has been explicitly set.
  public var hasReadTime: Bool {return self._readTime != nil}
  /// Clears the value of `readTime`. Subsequent reads from it will return its default value.
  public mutating func clearReadTime() {self._readTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _readTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// A message indicating that the document that is known to exist but its data
/// is unknown.
public struct Firestore_Client_UnknownDocument {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The name of the document that is known to exist, in the standard format:
  /// `projects/{project_id}/databases/{database_id}/documents/{document_path}`
  public var name: String = String()

  /// The version at which we know the document exists.
  public var version: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _version ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  public var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  public mutating func clearVersion() {self._version = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _version: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

/// Represents either an existing document, the explicitly known absence of a
/// document, or a document that is known to exist (at some version) but whose
/// contents are unknown.
public struct Firestore_Client_MaybeDocument {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var documentType: Firestore_Client_MaybeDocument.OneOf_DocumentType? = nil

  /// Used if the document is known to not exist.
  public var noDocument: Firestore_Client_NoDocument {
    get {
      if case .noDocument(let v)? = documentType {return v}
      return Firestore_Client_NoDocument()
    }
    set {documentType = .noDocument(newValue)}
  }

  /// The document (if it exists).
  public var document: Google_Firestore_V1_Document {
    get {
      if case .document(let v)? = documentType {return v}
      return Google_Firestore_V1_Document()
    }
    set {documentType = .document(newValue)}
  }

  /// Used if the document is known to exist but its data is unknown.
  public var unknownDocument: Firestore_Client_UnknownDocument {
    get {
      if case .unknownDocument(let v)? = documentType {return v}
      return Firestore_Client_UnknownDocument()
    }
    set {documentType = .unknownDocument(newValue)}
  }

  /// `has_committed_mutations` marks documents that were written to the remote
  /// document store based on a write acknowledgment. These documents are
  /// potentially inconsistent with the backend's copy and use the write's
  /// commit version as their document version.
  public var hasCommittedMutations_p: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_DocumentType: Equatable {
    /// Used if the document is known to not exist.
    case noDocument(Firestore_Client_NoDocument)
    /// The document (if it exists).
    case document(Google_Firestore_V1_Document)
    /// Used if the document is known to exist but its data is unknown.
    case unknownDocument(Firestore_Client_UnknownDocument)

  #if !swift(>=4.1)
    public static func ==(lhs: Firestore_Client_MaybeDocument.OneOf_DocumentType, rhs: Firestore_Client_MaybeDocument.OneOf_DocumentType) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.noDocument, .noDocument): return {
        guard case .noDocument(let l) = lhs, case .noDocument(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.document, .document): return {
        guard case .document(let l) = lhs, case .document(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.unknownDocument, .unknownDocument): return {
        guard case .unknownDocument(let l) = lhs, case .unknownDocument(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "firestore.client"

extension Firestore_Client_NoDocument: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".NoDocument"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "read_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._readTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try { if let v = self._readTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Firestore_Client_NoDocument, rhs: Firestore_Client_NoDocument) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._readTime != rhs._readTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Firestore_Client_UnknownDocument: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnknownDocument"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "version"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._version) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try { if let v = self._version {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Firestore_Client_UnknownDocument, rhs: Firestore_Client_UnknownDocument) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._version != rhs._version {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Firestore_Client_MaybeDocument: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MaybeDocument"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "no_document"),
    2: .same(proto: "document"),
    3: .standard(proto: "unknown_document"),
    4: .standard(proto: "has_committed_mutations"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Firestore_Client_NoDocument?
        var hadOneofValue = false
        if let current = self.documentType {
          hadOneofValue = true
          if case .noDocument(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.documentType = .noDocument(v)
        }
      }()
      case 2: try {
        var v: Google_Firestore_V1_Document?
        var hadOneofValue = false
        if let current = self.documentType {
          hadOneofValue = true
          if case .document(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.documentType = .document(v)
        }
      }()
      case 3: try {
        var v: Firestore_Client_UnknownDocument?
        var hadOneofValue = false
        if let current = self.documentType {
          hadOneofValue = true
          if case .unknownDocument(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.documentType = .unknownDocument(v)
        }
      }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.hasCommittedMutations_p) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.documentType {
    case .noDocument?: try {
      guard case .noDocument(let v)? = self.documentType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .document?: try {
      guard case .document(let v)? = self.documentType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .unknownDocument?: try {
      guard case .unknownDocument(let v)? = self.documentType else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    if self.hasCommittedMutations_p != false {
      try visitor.visitSingularBoolField(value: self.hasCommittedMutations_p, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Firestore_Client_MaybeDocument, rhs: Firestore_Client_MaybeDocument) -> Bool {
    if lhs.documentType != rhs.documentType {return false}
    if lhs.hasCommittedMutations_p != rhs.hasCommittedMutations_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
