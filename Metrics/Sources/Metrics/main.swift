import CommandLineKit
import Foundation
import MetricsLib

let cli = CommandLineKit.CommandLine()
let coveragePath = StringOption(shortFlag: "c",
                                longFlag: "coverage",
                                required: true,
                                helpMessage: "Required - The path of the JSON coverage report generated by XCov.")
let outputPath = StringOption(shortFlag: "o",
                              longFlag: "output",
                              required: true,
                              helpMessage: "Required - The path to write the database JSON info.")
let pullRequest = IntOption(shortFlag: "p",
                            longFlag: "pull_request",
                            required: true,
                            helpMessage: "Required - The number of the pull request that corresponds to this coverage run.")
cli.addOptions(coveragePath)
cli.addOptions(outputPath)
cli.addOptions(pullRequest)
do {
  try cli.parse()
} catch {
  cli.printUsage(error)
  exit(1)
}

do {
  let pullRequestTable = Table(table_name: "PullRequests",
                               column_names: ["pull_request_id"],
                               replace_measurements: [[Double(pullRequest.value!)]])
  let coverageTable = try Table.createFrom(coverage: CoverageReport.load(path: coveragePath.value!),
                                           pullRequest: pullRequest.value!)
  let json = try UploadMetrics(tables:[pullRequestTable, coverageTable]).json()
  try json.write(to: NSURL(fileURLWithPath: outputPath.value!) as URL,
                 atomically: false,
                 encoding: .utf8)
  print("Successfully created \(outputPath.value!)")
} catch {
  print("Error occurred: \(error)")
  exit(1)
}
