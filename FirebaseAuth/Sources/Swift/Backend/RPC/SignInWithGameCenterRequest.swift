//
//  File.swift
//  
//
//  Created by Morten Bek Ditlevsen on 17/01/2023.
//

import Foundation

private let kSignInWithGameCenterEndPoint = "signInWithGameCenter"

/** @class FIRSignInWithGameCenterRequest
    @brief The request to sign in with Game Center account
 */
@objc(FIRSignInWithGameCenterRequest) public class SignInWithGameCenterRequest: IdentityToolkitRequest, AuthRPCRequest {
    /** @property playerID
        @brief The playerID to verify.
     */
    @objc public var playerID: String

    /** @property publicKeyURL
        @brief The URL for the public encryption key.
     */
    @objc public var publicKeyURL: URL

    /** @property signature
        @brief The verification signature data generated by Game Center.
     */
    @objc public var signature: Data

    /** @property salt
        @brief A random strong used to compute the hash and keep it randomized.
     */
    @objc public var salt: Data

    /** @property timestamp
        @brief The date and time that the signature was created.
     */
    @objc public var timestamp: UInt64

    /** @property accessToken
        @brief The STS Access Token for the authenticated user, only needed for linking the user.
     */
    @objc public var accessToken: String?

    /** @property displayName
        @brief The display name of the local Game Center player.
     */
    @objc public var displayName: String?

    /** @fn initWithPlayerID:publicKeyURL:signature:salt:timestamp:displayName:requestConfiguration:
        @brief Designated initializer.
        @param playerID The ID of the Game Center player.
        @param publicKeyURL The URL for the public encryption key.
        @param signature The verification signature generated.
        @param salt A random string used to compute the hash and keep it randomized.
        @param timestamp The date and time that the signature was created.
        @param displayName The display name of the Game Center player.
     */
    @objc public init(playerID: String, publicKeyURL: URL, signature: Data, salt: Data, timestamp: UInt64, displayName: String?, requestConfiguration: AuthRequestConfiguration) {
        self.playerID = playerID
        self.publicKeyURL = publicKeyURL
        self.signature = signature
        self.salt = salt
        self.timestamp = timestamp
        self.displayName = displayName
        super.init(endpoint: kSignInWithGameCenterEndPoint, requestConfiguration: requestConfiguration)
    }

    public func unencodedHTTPRequestBody() throws -> Any {
        var postBody: [String: Any] = [
            "playerId": playerID,
            "publicKeyUrl": publicKeyURL.absoluteString,
            "signature": signature.base64URLEncodedString(),
            "salt": salt.base64URLEncodedString()
        ]
        if timestamp != 0 {
            postBody["timestamp"] = timestamp
        }
        if let accessToken {
            postBody["idToken"] = accessToken;
        }
        if let displayName {
            postBody["displayName"] = displayName;
        }
        return postBody
    }
}

// XXX TODO: Borrowed from HeartbeatsPayload. Figure out where to place this
extension Data {
    func base64URLEncodedString(options: Data.Base64EncodingOptions = []) -> String {
        base64EncodedString()
            .replacingOccurrences(of: "/", with: "_")
            .replacingOccurrences(of: "+", with: "-")
            .replacingOccurrences(of: "=", with: "")
    }
}
