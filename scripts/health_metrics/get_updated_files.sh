# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -ex
# Updated files in paths in code_coverage_file_list.json will trigger code coverage workflows.
# Updates in a pull request will generate a code coverage report in a PR.

while getopts p: flag
do
    case "${flag}" in
        p) spec_ouput_file=${OPTARG};;
    esac
done

dir=$(pwd)

# Get most rescent ancestor commit.
common_commit=$(git merge-base remotes/origin/${pr_branch} remotes/origin/${GITHUB_BASE_REF})
target_branch_head=$(git rev-parse remotes/origin/${GITHUB_BASE_REF})
echo "The common commit is ${common_commit}."
echo "The target branch head commit is ${target_branch_head}."
# Set target branch head and this will be used to compare diffs of coverage to the current commit.
echo "::set-output name=target_branch_head::${target_branch_head}"

cd scripts/health_metrics/generate_code_coverage_report

# List changed file from the merged commit. This is generated by comparing the
# merge commit to the head commit from the target branch.
git diff --name-only remotes/origin/${GITHUB_BASE_REF} ${GITHUB_SHA} > updated_files.txt

if [ -z $spec_output_file] ; then
swift run UpdatedFilesCollector --changed-file-paths updated_files.txt --code-coverage-file-patterns ../code_coverage_file_list.json
else
swift run UpdatedFilesCollector --changed-file-paths updated_files.txt --code-coverage-file-patterns ../code_coverage_file_list.json --output-sdk-file-url "${spec_output_file}"
mv "${spec_output_file}" "${dir}"
fi
